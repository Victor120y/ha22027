section .data               ;Agregamos la seccion para los datos inicializados.
    valor1 dw 45            ; Define valor1 con valor inicial de 45.
    valor2 dw 20            ; Define valor2 con valor inicial de 20.
    valor3 dw 10            ; Define valor3 con valor inicial de 10.

section .bss
    resta resw 3            ; Se reserva espacio para almacenar 2 byte (16 bits) como resultado.

section .text
global _start               ; Inicio del programa o entrada

_start:                     ; Etiqueta de inicio del programa
    mov ax, [valor1]        ; Mueve el valor1 al espacio ax
    sub ax, [valor2]        ; Resta el valor2 al espacio ax donde esta el valor1
    sub ax, [valor3]        ; Resta el valor3 al espacio ax donde esta el resultado de valor1-valor2

                            ; Convertir el resta a ASCII
    mov ah, 0               
    mov bl, 10              ; Divisor para convertir a decimal
    div bl                  ; Dividir AX por 10

    add al, '0'             ; Convertir el dígito menos significativo a ASCII
    mov [resta], al         ; Almacenar el dígito en la memoria

    mov al, ah              
    add al, '0'             ; Convertir el dígito más significativo a ASCII
    mov [resta + 1], al     ; Almacenar el dígito en la memoria
 
                            ; Imprimir el resta
    mov eax, 4              ; Prepara la llamada al sistema para imprimir
    mov ebx, 1              ; Establece stdout como el descriptor de archivo
    mov ecx, resta          ; Carga la dirección de memoria de resta
    mov edx, 2              ; Carga la longitud de los datos a imprimir
    int 0x80                ; Realiza la llamada al sistema para imprimir en la salida estándar

                            ; Salir del programa
    mov eax, 1              ; Prepara la llamada al sistema para salir del programa
    mov ebx, 0              ; Establece un código de salida exitoso
    int 0x80                ; Realiza la llamada al sistema para finalizar el programa